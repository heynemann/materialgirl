{"name":"Materialgirl","tagline":"MaterialGirl is a library to keep materialized views and consolidations up-to-date.","body":"MaterialGirl\r\n============\r\n\r\nMaterialGirl is a library to keep materialized views and consolidations up-to-date.\r\n\r\nInstalling\r\n==========\r\n\r\nIntalling it is as easy as::\r\n\r\n    $ pip install materialgirl\r\n\r\nUsage\r\n=====\r\n\r\nMaterialGirl can be used to keep a set of data, called \"materials\", up-to-date.\r\n\r\nIt is very useful to keep slow queries or consolidated data fast to get.\r\n\r\nYou also need to select a storage (more on storages later). MaterialGirl comes bundled with two storages:\r\n\r\n* materialgirl.storage.memory.InMemoryStorage\r\n* materialgirl.storage.redis.RedisStorage\r\n\r\nUsing MaterialGirl:\r\n\r\n    from materialgirl import MaterialGirl\r\n    from materialgirl.storage.memory import InMemoryStorage\r\n\r\n    def get_very_slow_data():\r\n        return \"this is very slow to get\"\r\n\r\n    storage = InMemoryStorage()\r\n    girl = MaterialGirl(storage=storage)\r\n\r\n    girl.add_material(\r\n        'my-very-slow-data-key',\r\n        get_very_slow_data,  # this should be the function to get up-to-date data\r\n        120  # the expiration in seconds\r\n    )\r\n\r\n    girl.run()  # this updates all the expired materials and should be run in a loop\r\n\r\nStorages\r\n========\r\n\r\nThe in-memory storage is more of a proof of concept and should only be used for very simple scenarios as it stores the data in-process.\r\n\r\nRedis Storage\r\n-------------\r\n\r\nThe redis storage takes one parameter: a redis connection.\r\n\r\n    import redis\r\n    from materialgirl.storage.redis import RedisStorage\r\n\r\n    storage = RedisStorage(redis=redis.StrictRedis())\r\n\r\nContributing\r\n============\r\n\r\nJust fork, commit, pull request our way.\r\n\r\nLicense\r\n=======\r\n\r\nMIT licensed.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}