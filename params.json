{"name":"Materialgirl","tagline":"MaterialGirl is a library to keep materialized views and consolidations up-to-date.","body":"MaterialGirl\r\n============\r\n\r\nMaterialGirl is a library to keep materialized views and consolidations up-to-date.\r\n\r\nInstalling\r\n==========\r\n\r\nIntalling it is as easy as::\r\n\r\n    $ pip install materialgirl\r\n\r\nUsage\r\n=====\r\n\r\nMaterialGirl can be used to keep a set of data, called \"materials\", up-to-date.\r\n\r\nIt is very useful to keep slow queries or consolidated data fast to get.\r\n\r\nYou also need to select a storage (more on storages later). MaterialGirl comes bundled with two storages:\r\n\r\n* materialgirl.storage.memory.InMemoryStorage\r\n* materialgirl.storage.redis.RedisStorage\r\n\r\nUsing MaterialGirl:\r\n\r\n    from materialgirl import Materializer\r\n    from materialgirl.storage.memory import InMemoryStorage\r\n\r\n    def get_very_slow_data():\r\n        return \"this is very slow to get\"\r\n\r\n    storage = InMemoryStorage()\r\n    girl = Materializer(storage=storage)\r\n\r\n    girl.add_material(\r\n        'my-very-slow-data-key',\r\n        get_very_slow_data,  # this should be the function to get up-to-date data\r\n        120  # the expiration in seconds\r\n    )\r\n\r\n    girl.run()  # this updates all the expired materials and should be run in a loop\r\n\r\nRetrieving Up-To-Date Information\r\n=================================\r\n\r\nWhenever you need to get the up-to-date information you set with material girl, just call the get method on an instance with the\r\nsame materials as the one you are running to update date, like this:\r\n\r\n    from materialgirl import Materializer\r\n    from materialgirl.storage.memory import InMemoryStorage\r\n\r\n    def get_very_slow_data():\r\n        return \"this is very slow to get\"\r\n\r\n    storage = InMemoryStorage()\r\n    girl = Materializer(storage=storage)\r\n\r\n    girl.add_material(\r\n        'my-very-slow-data-key',\r\n        get_very_slow_data,  # this should be the function to get up-to-date data\r\n        120  # the expiration in seconds\r\n    )\r\n\r\n    assert girl.get('my-very-slow-data-key') == 'this is very slow to get'\r\n\r\nMaterialGirl is lazy. If it has not the up-to-date value in storage to give you, it will call your get method, update the storage and return the proper value.\r\n\r\nStorages\r\n========\r\n\r\nThe in-memory storage is more of a proof of concept and should only be used for very simple scenarios as it stores the data in-process.\r\n\r\nRedis Storage\r\n-------------\r\n\r\nThe redis storage takes one parameter: a redis connection.\r\n\r\n    import redis\r\n    from materialgirl.storage.redis import RedisStorage\r\n\r\n    storage = RedisStorage(redis=redis.StrictRedis())\r\n\r\nCreating a Custom Storage\r\n-------------------------\r\n\r\nCreating a custom storage is as simple as implementing two methods: `store` and `retrieve`:\r\n\r\n    from materialgirl.storage import Storage\r\n\r\n    class MyCustomStorage(Storage):\r\n        def store(self, key, value, expiration=None):\r\n            # store the value somewhere under `key`\r\n\r\n        def get(self, key):\r\n            # retrieve the value for `key` from same storage solution\r\n\r\nContributing\r\n============\r\n\r\nJust fork, commit, pull request our way.\r\n\r\nLicense\r\n=======\r\n\r\nMIT licensed.\r\n","google":"UA-48973824-1","note":"Don't delete this file! It's used internally to help with page regeneration."}